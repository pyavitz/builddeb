sources(){
source userdata.txt
mkdir -p sources
cp userdata.txt sources/
cd sources
}

echo_bdone(){
echo -e "${PNK}[${FIN}${GRN}done${FIN}${PNK}]${FIN}"
}

download(){
echo -e "${RED}Downloading archive${FIN}."
if ls linux-${VERSION}.tar.xz > /dev/null 2>&1;
	then echo -e "${YLW}linux-${VERSION}.tar.xz found${FIN}.";
	else aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-${VERSION}.tar.xz && echo_bdone;
fi
if `grep -Fx "rtl8812au=1" "../userdata.txt" >/dev/null;`
	then rtl8812au_download;
fi
if `grep -Fx "rtl88x2bu=1" "../userdata.txt" >/dev/null;`
	then rtl88x2bu_download;
fi
if `grep -Fx "rtl8811cu=1" "../userdata.txt" >/dev/null;`
	then rtl8811cu_download;
fi
}

extract(){
echo
echo -e "${RED}Extracting${FIN} ..."
echo -e -n "${WHT}"
pv linux-${VERSION}.tar.xz | tar -xJ linux-${VERSION}
echo -e -n "${FIN}"
}

move_builddeb(){
cp -f ../../defconfig/builddeb scripts/package/
cp -f ../../defconfig/mkdebian scripts/package/
chmod +x scripts/package/builddeb
chmod +x scripts/package/mkdebian
}

# setup
setup(){
sleep 1s
if `grep -Fx "rtl8812au=1" "../userdata.txt" >/dev/null;`
	then rtl8812au;
fi
if `grep -Fx "rtl88x2bu=1" "../userdata.txt" >/dev/null;`
	then rtl88x2bu;
fi
if `grep -Fx "rtl8811cu=1" "../userdata.txt" >/dev/null;`
	then rtl8811cu;
fi
cd linux-${VERSION}
rm -f scripts/package/builddeb
rm -f scripts/package/mkdebian
move_builddeb
}

sed_name(){
# edit kernel package name
sed -i 's/packagename=linux-image-$version/packagename='$DEFCONFIG'-linux-image/g' scripts/package/builddeb
sed -i 's/kernel_headers_packagename=linux-headers-$version/kernel_headers_packagename='$DEFCONFIG'-linux-headers/g' scripts/package/builddeb
sed -i 's/packagename=linux-image-$version/packagename='$DEFCONFIG'-linux-image/g' scripts/package/mkdebian
sed -i 's/kernel_headers_packagename=linux-headers-$version/kernel_headers_packagename='$DEFCONFIG'-linux-headers/g' scripts/package/mkdebian
}

defconfig(){
echo
echo -e "${RED}Building ${DEFCONFIG}_defconfig${FIN}."
cp -f ../../defconfig/${DEFCONFIG}_defconfig arch/${ARCH}/configs/
rtl8812au_module
rtl88x2bu_module
rtl8811cu_module
make ARCH=${ARCH} CC=${GCC} ${DEFCONFIG}_defconfig
echo -e "${RED}Done${FIN}."
}

menuconfig(){
echo
echo -e "${RED}Opening menuconfig${FIN}."
sleep 1s
make ARCH=${ARCH} CC=${GCC} menuconfig
echo -e "${RED}Done${FIN}."
}

builddeb(){
echo
echo -e "${RED}Building deb packages${FIN}."
echo 'y' | make -j${CORES} KBUILD_BUILD_HOST=${DEFCONFIG} ARCH=${ARCH} CC=${GCC} bindeb-pkg
cd ..
rm -f linux-libc-dev*.deb
rm -f *.buildinfo
rm -f *.changes
mkdir -p ../output/${DEFCONFIG} && mv -f *.deb ../output/${DEFCONFIG}/
echo -e "${RED}Done${FIN}."
}

clean(){
if ls linux-${VERSION} > /dev/null 2>&1;
	then echo "" && echo -e "${YLW}Cleaning${FIN} ..." && rm -fdr linux-${VERSION};
fi
if ls *.deb > /dev/null 2>&1;
	then mkdir -p debs && mv -f *.deb debs/;
fi
}

userpatches(){
if
ls ../${UP}/*.patch > /dev/null 2>&1;
then echo -e "${GRN}Applying user patches${FIN}." &&
for i in ../${UP}/*.patch; do patch -p1 < $i; done && echo -e "${RED}Done${FIN}.";
else echo -e "${YLW}No user patches found${FIN}.";
fi
}
